name: Build Zed Fork

on:
  # Executa a cada 4 horas para verificar atualizações no repositório base
  schedule:
    - cron: '0 */4 * * *'
  # Permite execução manual
  workflow_dispatch:
  # Monitora pushes no seu fork
  push:
    branches: [ main, master ]
  # Monitora o repositório base
  repository_dispatch:
    types: [upstream_push]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"
  # Defina aqui o repositório base
  UPSTREAM_REPO: "zed-industries/zed"
  BASE_BRANCH: "main"  # ou master, dependendo do branch principal do projeto base

jobs:
  check_upstream:
    name: Verificar Atualizações Upstream
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      base_sha: ${{ steps.check.outputs.base_sha }}
    
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verificar atualizações no repositório base
        id: check
        run: |
          # Adiciona o repositório base como remote
          git remote add upstream https://github.com/${{ env.UPSTREAM_REPO }}.git
          git fetch upstream

          # Obtém o último commit do repositório base
          BASE_SHA=$(git rev-parse upstream/${{ env.BASE_BRANCH }})
          echo "base_sha=$BASE_SHA" >> $GITHUB_OUTPUT
          
          # Verifica se precisamos buildar (novo commit ou workflow manual)
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] || \
             [[ "${{ github.event_name }}" == "push" ]] || \
             [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            # Verifica se há commits novos desde o último build
            LAST_BUILD_SHA=$(git rev-parse HEAD || echo "")
            if [[ "$LAST_BUILD_SHA" != "$BASE_SHA" ]]; then
              echo "should_build=true" >> $GITHUB_OUTPUT
            else
              echo "should_build=false" >> $GITHUB_OUTPUT
            fi
          fi

  build:
    needs: check_upstream
    if: needs.check_upstream.outputs.should_build == 'true'
    name: Build Zed
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
      - name: Configurar caminhos longos no Git
        run: |
          git config --system core.longpaths true
        shell: bash

      - name: Configurar caminhos longos no Windows
        shell: powershell
        run: |
          New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" `
            -Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force

      - name: Checkout do repositório base
        uses: actions/checkout@v4
        with:
          repository: ${{ env.UPSTREAM_REPO }}
          ref: ${{ needs.check_upstream.outputs.base_sha }}
          fetch-depth: 1

      - name: Instalar toolchain Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          targets: wasm32-wasi
          components: rustfmt, clippy

      - name: Cache do Rust
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "windows-build"
          cache-on-failure: true

      - name: Verificar formatação do código
        run: cargo fmt --check
        
      - name: Executar Clippy
        run: cargo clippy -- -D warnings
        
      - name: Compilar em modo release
        run: |
          cargo build --release
          if (-not (Test-Path "target/release/zed.exe")) {
            exit 1
          }
        shell: pwsh

      - name: Preparar artefato para upload
        run: |
          mkdir -p artifacts
          cp target/release/zed.exe artifacts/
        shell: bash

      - name: Upload do artefato
        uses: actions/upload-artifact@v3
        with:
          name: zed-windows
          path: artifacts/zed.exe
          retention-days: 5

  release:
    needs: [check_upstream, build]
    if: needs.check_upstream.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Download do artefato
        uses: actions/download-artifact@v3
        with:
          name: zed-windows
          path: ./

      - name: Configurar data e hash
        id: info
        run: |
          echo "current_date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
          echo "commit_sha=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT

      - name: Remover release anterior
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release delete ${{ steps.info.outputs.current_date }} --yes || true
        continue-on-error: true

      - name: Criar arquivo ZIP
        run: |
          zip -j zed-windows.zip zed.exe
          sha256sum zed-windows.zip > zed-windows.zip.sha256

      - name: Criar Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.info.outputs.current_date }}
          name: "Zed Build ${{ steps.info.outputs.current_date }}"
          body: |
            Build automático do Zed para Windows
            Data: ${{ steps.info.outputs.current_date }}
            Commit base: ${{ needs.check_upstream.outputs.base_sha }}
            
            SHA256 Checksum:
            ```
            $(cat zed-windows.zip.sha256)
            ```
          draft: false
          prerelease: true
          artifacts: "zed-windows.zip,zed-windows.zip.sha256"
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
